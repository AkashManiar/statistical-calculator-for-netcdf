function aggregatedIntervals = caculateDecadalValues(netcdfFile, start_year, end_year, interval)
    % Here it assumes that time is present in netcdf file, and all the time
    % values are caculate from days since 1850-01-01 (proleptic gregorian
    % calendar)
    gregorian_date = datetime(1850,1,1);
    
    file_details = GetNetCDF_FileDetails(netcdfFile);
    vr_name = char(file_details('variable_name'));
    
    % Time must be present in netcdf file
    time = ncread(netcdfFile, 'time');
    variable = ncread(netcdfFile, vr_name);
    time = gregorian_date + days(time);
    cond = year(time) >= start_year & year(time) <= end_year;
    time = time(cond);
    variable = variable(cond);
    seasons = {'Winter'; 'Spring'; 'Summer'; 'Autumn'};
    VariableNames = {'Decade', 'Season', 'Seasonal decadal average', 'Seasonal decadal STD', 'Seasonal decadal maximun', 'Seasonal decadal minimum'};
    aggregatedIntervals = table();
    
    for decade_yr = start_year:interval:end_year
        winter = zeros(1, 30);
        spring = zeros(1, 30);
        summer = zeros(1, 30);
        autumn = zeros(1, 30);
        for yr = decade_yr:decade_yr+interval-1
            single_year = year(time) == yr;
            
            each_yr = time(single_year);
            each_sob = variable(single_year);
            
%             disp(each_yr);
%             disp('--------------------------------------------');
%             disp(each_sob);
%             disp('--------------------------------------------');
            win = each_sob(month(each_yr) >= 1 & month(each_yr) <= 3);
            winter = write_seasonal_valofyear(winter, win);
%             disp(winter);
%             disp('--------------------------------------------');
            sp = each_sob(month(each_yr) >= 4 & month(each_yr) <= 6);
            spring = write_seasonal_valofyear(spring, sp);

            su = each_sob(month(each_yr) >= 7 & month(each_yr) <= 9);
            summer = write_seasonal_valofyear(summer, su);

            aut = each_sob(month(each_yr) >= 10 & month(each_yr) < 12);
            autumn = write_seasonal_valofyear(autumn, aut);
            
        end
        decade = cell(4,1);
        decade(:) = {strcat(num2str(decade_yr), '-', num2str(decade_yr+interval-1))};
        seasonal_avg = [mean(winter); mean(spring); mean(summer); mean(autumn)];
        seasonal_std = [std(winter); std(spring); std(summer); std(autumn)];
        seasonal_max = [max(winter); max(spring); max(summer); max(autumn)];
        seasonal_min = [min(winter); min(spring); min(summer); min(autumn)];
        t = table(decade, seasons, seasonal_avg, seasonal_std, seasonal_max, seasonal_min);
        aggregatedIntervals = [aggregatedIntervals; t];
    end
    % Adds property to table 
    aggregatedIntervals.Properties.VariableNames = VariableNames;
%     disp(aggregatedIntervals);
%     writetable(aggregatedIntervals, 'a.xls');
    function season = write_seasonal_valofyear(season, each_yr_sob)
        [~, ind] = (min((abs(season)')));
        fill_arry_upto = ind+length(each_yr_sob)-1;
        season(ind:fill_arry_upto) = each_yr_sob;
    end
   
end


